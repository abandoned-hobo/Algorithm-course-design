/*
#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
using namespace std;
typedef long long LL;
const int N = 50005;
const int inf = (int)1e9;
int n, cnt, c[N], d[N], w[N], f[N], p[N];
struct tree{ int x, y, w; }e[N * 10];
struct inda{ int x, y, id, val; }a[N];
int read()
{
	int x = 0, f = 1; char ch = getchar();
	while (ch<'0' || ch>'9'){ if (ch == '-')f = -1; ch = getchar(); }
	while (ch >= '0'&&ch <= '9'){ x = x * 10 + ch - '0'; ch = getchar(); }
	return x*f;
}
int search(int x)
{
	if (f[x] == x) return x;
	else return f[x] = search(f[x]);
}
bool cp(inda a, inda b)
{
	return a.x<b.x || a.x == b.x&&a.y<b.y;
}
bool cp1(tree a, tree b)
{
	return a.w<b.w;
}
void ins(int x, int y, int z)
{
	while (x <= n)
	{
		if (y<c[x]) c[x] = y, d[x] = z;
		x += x&(-x);
	}
}
int query(int x)
{
	int ans = inf, pos = 0;
	while (x)
	{
		if (c[x]<ans) ans = c[x], pos = d[x];
		x -= x&(-x);
	}
	return pos;
}
int main()
{
	n = read();
	for (int i = 1; i <= n; i++) a[i].x = read(), a[i].y = read(), a[i].id = i, w[i] = a[i].x;
	sort(w + 1, w + n + 1);
	int w1 = unique(w + 1, w + n + 1) - w - 1;
	for (int i = 1; i <= n; i++) p[i] = lower_bound(w + 1, w + w1 + 1, a[i].x) - w;
	for (int i = 1; i <= n; i++) w[i] = a[i].y;
	sort(w + 1, w + n + 1);
	w1 = unique(w + 1, w + n + 1) - w - 1;
	for (int dir = 0; dir<4; dir++)
	{
		if (dir == 1 || dir == 3) for (int i = 1; i <= n; i++) swap(a[i].x, a[i].y);
		else if (dir == 2) for (int i = 1; i <= n; i++) a[i].x = -a[i].x;
		for (int i = 1; i <= n; i++) a[i].val = a[i].y - a[i].x, w[i] = a[i].val;
		sort(a + 1, a + n + 1, cp); sort(w + 1, w + n + 1);
		int w1 = unique(w + 1, w + n + 1) - w - 1;
		for (int i = 1; i <= n; i++) c[i] = inf, d[i] = 0;
		for (int i = n; i >= 1; i--)
		{
			a[i].val = lower_bound(w + 1, w + w1 + 1, a[i].val) - w;
			int x = query(n - a[i].val + 1);
			if (x) e[++cnt].x = a[i].id, e[cnt].y = a[x].id, e[cnt].w = abs(a[i].x - a[x].x) + abs(a[i].y - a[x].y);
			ins(n - a[i].val + 1, a[i].x + a[i].y, i);
		}
	}
	LL ans = 0;
	sort(e + 1, e + cnt + 1, cp1);
	for (int i = 1; i <= n; i++) f[i] = i;
	for (int i = 1; i <= cnt; i++)
	{
		int x = search(e[i].x), y = search(e[i].y);
		if (x != y) f[x] = y, ans += e[i].w;
	}
	printf("%lld", ans);
	return 0;

}*/

#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
//#define MAX 1005
typedef struct
{
	int x;
	int y;
	int ct;
}bs;//顶点坐标及距离
int cxz(bs i, bs o)
{
	return abs(i.x - o.x) + abs(i.y - o.y);//距离求值
}
int main()
{

	vector<bs> x;
	bs b;
	int N;
	cin >> N;//顶点个数
	vector<bs> s(N);
	for (int i = 0; i < N; i++)
	{
		cin >> b.x >> b.y;//输入顶点
		b.ct = i;
		s[i] = b;
	}
	x.push_back(s[0]);
	s.erase(s.begin());
	int f = 0, m1 = 0;
	for (int i = 1; i < N; i++)
	{
		int  m2 = 100000;
		int lp = x.size();
		int py = s.size();
		for (int j=0;j<lp;j++)//求最小生成树
		{
			for (int k=0;k<py;k++)
			{
				int m = cxz(x[j], s[k]);
				if (m < m2)
				{
						m2 = m;
						b = s[k];
						f = k;
				}
			}
		}
		x.push_back(b);
		s.erase(s.begin() + f);
		m1 += m2;
	}
	cout << m1;
	return 0;
}
